
SafeDistanceMaintainingCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000712  000007a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  000007b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000355  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d2  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000266  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000264  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 01 	call	0x328	; 0x328 <main>
  9e:	0c 94 87 03 	jmp	0x70e	; 0x70e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
volatile float pulse = 0;
volatile int i = 0;

ISR(INT0_vect)
//interrupt service routine for external interrupt 0
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	if (i==1) 
  cc:	80 91 12 01 	lds	r24, 0x0112
  d0:	90 91 13 01 	lds	r25, 0x0113
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	09 f0       	breq	.+2      	; 0xda <__vector_1+0x34>
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__vector_1+0xbc>
	// when logic changes from HIGH to LOW
	
	{
		TCCR1B=0; 
  da:	10 92 81 00 	sts	0x0081, r1
		// disabling the counter
		
		pulse=TCNT1;
  de:	c4 e8       	ldi	r28, 0x84	; 132
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	68 81       	ld	r22, Y
  e4:	79 81       	ldd	r23, Y+1	; 0x01
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
  ee:	60 93 14 01 	sts	0x0114, r22
  f2:	70 93 15 01 	sts	0x0115, r23
  f6:	80 93 16 01 	sts	0x0116, r24
  fa:	90 93 17 01 	sts	0x0117, r25
		// store the count value
	
		pulse=pulse/932.8;
  fe:	60 91 14 01 	lds	r22, 0x0114
 102:	70 91 15 01 	lds	r23, 0x0115
 106:	80 91 16 01 	lds	r24, 0x0116
 10a:	90 91 17 01 	lds	r25, 0x0117
 10e:	23 e3       	ldi	r18, 0x33	; 51
 110:	33 e3       	ldi	r19, 0x33	; 51
 112:	49 e6       	ldi	r20, 0x69	; 105
 114:	54 e4       	ldi	r21, 0x44	; 68
 116:	0e 94 42 02 	call	0x484	; 0x484 <__divsf3>
 11a:	60 93 14 01 	sts	0x0114, r22
 11e:	70 93 15 01 	sts	0x0115, r23
 122:	80 93 16 01 	sts	0x0116, r24
 126:	90 93 17 01 	sts	0x0117, r25
		pulse=pulse+1;
 12a:	60 91 14 01 	lds	r22, 0x0114
 12e:	70 91 15 01 	lds	r23, 0x0115
 132:	80 91 16 01 	lds	r24, 0x0116
 136:	90 91 17 01 	lds	r25, 0x0117
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	5f e3       	ldi	r21, 0x3F	; 63
 142:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3>
 146:	60 93 14 01 	sts	0x0114, r22
 14a:	70 93 15 01 	sts	0x0115, r23
 14e:	80 93 16 01 	sts	0x0116, r24
 152:	90 93 17 01 	sts	0x0117, r25
		// converting the count value to centimeters and adjusting the value
		
		TCNT1=0;
 156:	19 82       	std	Y+1, r1	; 0x01
 158:	18 82       	st	Y, r1
		//resetting the counter memory
		
		i=0;
 15a:	10 92 13 01 	sts	0x0113, r1
 15e:	10 92 12 01 	sts	0x0112, r1
	}
	if (i==0)
 162:	80 91 12 01 	lds	r24, 0x0112
 166:	90 91 13 01 	lds	r25, 0x0113
 16a:	89 2b       	or	r24, r25
 16c:	59 f4       	brne	.+22     	; 0x184 <__vector_1+0xde>
	// when logic changes from HIGH to LOW
	
	{
		TCCR1B|=(1<<CS10);
 16e:	e1 e8       	ldi	r30, 0x81	; 129
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
		// enabling the counter
		
		i=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 13 01 	sts	0x0113, r25
 180:	80 93 12 01 	sts	0x0112, r24
	}
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <UART_Init>:


void UART_Init()
{

	UCSR0B |= ((1<< RXEN0) | (1<< TXEN0));
 1aa:	e1 ec       	ldi	r30, 0xC1	; 193
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 61       	ori	r24, 0x18	; 24
 1b2:	80 83       	st	Z, r24
	// enable receive and transmit
	
	UBRR0H = 0;
 1b4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103;
 1b8:	87 e6       	ldi	r24, 0x67	; 103
 1ba:	80 93 c4 00 	sts	0x00C4, r24
 1be:	08 95       	ret

000001c0 <UART_Transmit>:
	// baud rate 9600
}

void UART_Transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0) )){
 1c0:	e0 ec       	ldi	r30, 0xC0	; 192
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	95 ff       	sbrs	r25, 5
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <UART_Transmit+0x4>
	// wait for empty transmit buffer
		
	}
	UDR0 = data;
 1ca:	80 93 c6 00 	sts	0x00C6, r24
 1ce:	08 95       	ret

000001d0 <Serial_print_text>:
	// put data into buffer
}

void Serial_print_text(char* text){
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while (text[i] != '$'){
 1d8:	88 81       	ld	r24, Y
 1da:	84 32       	cpi	r24, 0x24	; 36
 1dc:	51 f0       	breq	.+20     	; 0x1f2 <Serial_print_text+0x22>
	UDR0 = data;
	// put data into buffer
}

void Serial_print_text(char* text){
	unsigned char i=0;
 1de:	10 e0       	ldi	r17, 0x00	; 0
	while (text[i] != '$'){
		UART_Transmit(text[i]);
 1e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Transmit>
		i++;
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
	// put data into buffer
}

void Serial_print_text(char* text){
	unsigned char i=0;
	while (text[i] != '$'){
 1e6:	fe 01       	movw	r30, r28
 1e8:	e1 0f       	add	r30, r17
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 81       	ld	r24, Z
 1ee:	84 32       	cpi	r24, 0x24	; 36
 1f0:	b9 f7       	brne	.-18     	; 0x1e0 <Serial_print_text+0x10>
		UART_Transmit(text[i]);
		i++;
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	08 95       	ret

000001fa <Serial_print_val>:
// function to print text on serial monitor

void Serial_print_val(unsigned int val){
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	8c 01       	movw	r16, r24
	unsigned char digit;
	unsigned int p = 10;
	if(val < 10)
 204:	8a 30       	cpi	r24, 0x0A	; 10
 206:	91 05       	cpc	r25, r1
 208:	30 f0       	brcs	.+12     	; 0x216 <Serial_print_val+0x1c>
	UART_Transmit(val%10 + 0x30);
	else{
		while(val / p > 10)
 20a:	8e 36       	cpi	r24, 0x6E	; 110
 20c:	91 05       	cpc	r25, r1
 20e:	08 f5       	brcc	.+66     	; 0x252 <Serial_print_val+0x58>
 210:	ca e0       	ldi	r28, 0x0A	; 10
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	34 c0       	rjmp	.+104    	; 0x27e <Serial_print_val+0x84>

void Serial_print_val(unsigned int val){
	unsigned char digit;
	unsigned int p = 10;
	if(val < 10)
	UART_Transmit(val%10 + 0x30);
 216:	9c 01       	movw	r18, r24
 218:	ad ec       	ldi	r26, 0xCD	; 205
 21a:	bc ec       	ldi	r27, 0xCC	; 204
 21c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	9c 01       	movw	r18, r24
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	82 0f       	add	r24, r18
 240:	93 1f       	adc	r25, r19
 242:	98 01       	movw	r18, r16
 244:	28 1b       	sub	r18, r24
 246:	39 0b       	sbc	r19, r25
 248:	c9 01       	movw	r24, r18
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Transmit>
 250:	44 c0       	rjmp	.+136    	; 0x2da <Serial_print_val+0xe0>
	else{
		while(val / p > 10)
 252:	ca e0       	ldi	r28, 0x0A	; 10
 254:	d0 e0       	ldi	r29, 0x00	; 0
		p *= 10;
 256:	ce 01       	movw	r24, r28
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	cc 0f       	add	r28, r28
 25e:	dd 1f       	adc	r29, r29
 260:	cc 0f       	add	r28, r28
 262:	dd 1f       	adc	r29, r29
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	c8 0f       	add	r28, r24
 26a:	d9 1f       	adc	r29, r25
	unsigned char digit;
	unsigned int p = 10;
	if(val < 10)
	UART_Transmit(val%10 + 0x30);
	else{
		while(val / p > 10)
 26c:	c8 01       	movw	r24, r16
 26e:	be 01       	movw	r22, r28
 270:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodhi4>
 274:	6b 30       	cpi	r22, 0x0B	; 11
 276:	71 05       	cpc	r23, r1
 278:	70 f7       	brcc	.-36     	; 0x256 <Serial_print_val+0x5c>
		p *= 10;
		while(p){
 27a:	20 97       	sbiw	r28, 0x00	; 0
 27c:	71 f1       	breq	.+92     	; 0x2da <Serial_print_val+0xe0>
			digit = (val / p) % 10;
 27e:	c8 01       	movw	r24, r16
 280:	be 01       	movw	r22, r28
 282:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodhi4>
 286:	ab 01       	movw	r20, r22
 288:	9b 01       	movw	r18, r22
 28a:	ad ec       	ldi	r26, 0xCD	; 205
 28c:	bc ec       	ldi	r27, 0xCC	; 204
 28e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__umulhisi3>
 292:	bc 01       	movw	r22, r24
 294:	76 95       	lsr	r23
 296:	67 95       	ror	r22
 298:	76 95       	lsr	r23
 29a:	67 95       	ror	r22
 29c:	76 95       	lsr	r23
 29e:	67 95       	ror	r22
 2a0:	cb 01       	movw	r24, r22
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	68 0f       	add	r22, r24
 2b4:	79 1f       	adc	r23, r25
 2b6:	46 1b       	sub	r20, r22
 2b8:	57 0b       	sbc	r21, r23
			p /= 10;
 2ba:	9e 01       	movw	r18, r28
 2bc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__umulhisi3>
 2c0:	ec 01       	movw	r28, r24
 2c2:	d6 95       	lsr	r29
 2c4:	c7 95       	ror	r28
 2c6:	d6 95       	lsr	r29
 2c8:	c7 95       	ror	r28
 2ca:	d6 95       	lsr	r29
 2cc:	c7 95       	ror	r28
			digit += 0x30;
			UART_Transmit(digit);
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	84 0f       	add	r24, r20
 2d2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Transmit>
	if(val < 10)
	UART_Transmit(val%10 + 0x30);
	else{
		while(val / p > 10)
		p *= 10;
		while(p){
 2d6:	20 97       	sbiw	r28, 0x00	; 0
 2d8:	91 f6       	brne	.-92     	; 0x27e <Serial_print_val+0x84>
			p /= 10;
			digit += 0x30;
			UART_Transmit(digit);
		}
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <controlMotors>:

#ifndef MOTORDRIVER_H_
#define MOTORDRIVER_H_

void controlMotors(unsigned int pulse){
	if(pulse <=5){
 2e4:	86 30       	cpi	r24, 0x06	; 6
 2e6:	91 05       	cpc	r25, r1
 2e8:	20 f4       	brcc	.+8      	; 0x2f2 <controlMotors+0xe>
		OCR2A = 255;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	80 93 b3 00 	sts	0x00B3, r24
 2f0:	08 95       	ret
		//motor stopped, duty cycle 0%
		
		}else if(pulse>5 && pulse <=25){
 2f2:	9c 01       	movw	r18, r24
 2f4:	26 50       	subi	r18, 0x06	; 6
 2f6:	31 09       	sbc	r19, r1
 2f8:	24 31       	cpi	r18, 0x14	; 20
 2fa:	31 05       	cpc	r19, r1
 2fc:	20 f4       	brcc	.+8      	; 0x306 <controlMotors+0x22>
		OCR2A = 127;
 2fe:	8f e7       	ldi	r24, 0x7F	; 127
 300:	80 93 b3 00 	sts	0x00B3, r24
 304:	08 95       	ret
		// duty cycle 50%
		}else if(pulse >25){
 306:	4a 97       	sbiw	r24, 0x1a	; 26
 308:	10 f0       	brcs	.+4      	; 0x30e <controlMotors+0x2a>
		OCR2A = 0;
 30a:	10 92 b3 00 	sts	0x00B3, r1
 30e:	08 95       	ret

00000310 <pwm_init>:


void pwm_init()
{
	
	TCCR2A |= (1<<COM2A1) | (1<<COM2A0) | (1<<WGM21) | (1<<WGM20);
 310:	e0 eb       	ldi	r30, 0xB0	; 176
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	83 6c       	ori	r24, 0xC3	; 195
 318:	80 83       	st	Z, r24
	// initialize TCCR2 as: fast pwm mode, non inverting
	
	TCCR2B |= (1<<CS21);
 31a:	e1 eb       	ldi	r30, 0xB1	; 177
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	82 60       	ori	r24, 0x02	; 2
 322:	80 83       	st	Z, r24
    // clkT2S/8 prescale
	
	DDRB |= (1<<PB3);
 324:	23 9a       	sbi	0x04, 3	; 4
 326:	08 95       	ret

00000328 <main>:
// header with the code for the PWM signal


int main(void)
{
	pwm_init();
 328:	0e 94 88 01 	call	0x310	; 0x310 <pwm_init>
	UART_Init();
 32c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UART_Init>
	
	DDRB |= ((1<< DDB0) | (1<<DDB2) | (1 << DDB3)); 
 330:	84 b1       	in	r24, 0x04	; 4
 332:	8d 60       	ori	r24, 0x0D	; 13
 334:	84 b9       	out	0x04, r24	; 4
	//set pins 0,2 and 3 of port B as output
	
	DDRD |= ((1 << DDD4) | (1 << DDD7));     
 336:	8a b1       	in	r24, 0x0a	; 10
 338:	80 69       	ori	r24, 0x90	; 144
 33a:	8a b9       	out	0x0a, r24	; 10
	// set pins 4 and 7 of port D as output
	
	EICRA |= ((1 << ISC00) | (1 << ISC10));    
 33c:	e9 e6       	ldi	r30, 0x69	; 105
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	85 60       	ori	r24, 0x05	; 5
 344:	80 83       	st	Z, r24
	// set INT0 to trigger on ANY logic change
	
	EIMSK |= ((1 << INT0) | (1 << INT1));     
 346:	8d b3       	in	r24, 0x1d	; 29
 348:	83 60       	ori	r24, 0x03	; 3
 34a:	8d bb       	out	0x1d, r24	; 29
	// turns on INT0
	
	TCCR1A = 0;
 34c:	10 92 80 00 	sts	0x0080, r1
	// initialize the counter

	sei();
 350:	78 94       	sei
	// turn on interrupts
	
	while (1){
		  
		PORTD |= (1 << PD7);     
 352:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	87 ec       	ldi	r24, 0xC7	; 199
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x30>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x36>
 35e:	00 00       	nop
		// set pin 7 of Port D high
		
		_delay_us(50);
		
		PORTD &= ~(1 << PD7);    
 360:	5f 98       	cbi	0x0b, 7	; 11
		// set pin 7 of Port D low
		
		Serial_print_text("Distance = $");
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Serial_print_text>
		Serial_print_val(pulse);
 36a:	60 91 14 01 	lds	r22, 0x0114
 36e:	70 91 15 01 	lds	r23, 0x0115
 372:	80 91 16 01 	lds	r24, 0x0116
 376:	90 91 17 01 	lds	r25, 0x0117
 37a:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 37e:	cb 01       	movw	r24, r22
 380:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Serial_print_val>
		Serial_print_text("cm\r$");
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Serial_print_text>
		
		controlMotors(pulse);
 38c:	60 91 14 01 	lds	r22, 0x0114
 390:	70 91 15 01 	lds	r23, 0x0115
 394:	80 91 16 01 	lds	r24, 0x0116
 398:	90 91 17 01 	lds	r25, 0x0117
 39c:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 3a0:	cb 01       	movw	r24, r22
 3a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <controlMotors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	9f ef       	ldi	r25, 0xFF	; 255
 3a8:	23 ed       	ldi	r18, 0xD3	; 211
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	20 40       	sbci	r18, 0x00	; 0
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x84>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x8e>
 3b6:	00 00       	nop
 3b8:	cc cf       	rjmp	.-104    	; 0x352 <main+0x2a>

000003ba <__subsf3>:
 3ba:	50 58       	subi	r21, 0x80	; 128

000003bc <__addsf3>:
 3bc:	bb 27       	eor	r27, r27
 3be:	aa 27       	eor	r26, r26
 3c0:	0e d0       	rcall	.+28     	; 0x3de <__addsf3x>
 3c2:	48 c1       	rjmp	.+656    	; 0x654 <__fp_round>
 3c4:	39 d1       	rcall	.+626    	; 0x638 <__fp_pscA>
 3c6:	30 f0       	brcs	.+12     	; 0x3d4 <__addsf3+0x18>
 3c8:	3e d1       	rcall	.+636    	; 0x646 <__fp_pscB>
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <__addsf3+0x18>
 3cc:	31 f4       	brne	.+12     	; 0x3da <__addsf3+0x1e>
 3ce:	9f 3f       	cpi	r25, 0xFF	; 255
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <__addsf3+0x1a>
 3d2:	1e f4       	brtc	.+6      	; 0x3da <__addsf3+0x1e>
 3d4:	2e c1       	rjmp	.+604    	; 0x632 <__fp_nan>
 3d6:	0e f4       	brtc	.+2      	; 0x3da <__addsf3+0x1e>
 3d8:	e0 95       	com	r30
 3da:	e7 fb       	bst	r30, 7
 3dc:	24 c1       	rjmp	.+584    	; 0x626 <__fp_inf>

000003de <__addsf3x>:
 3de:	e9 2f       	mov	r30, r25
 3e0:	4a d1       	rcall	.+660    	; 0x676 <__fp_split3>
 3e2:	80 f3       	brcs	.-32     	; 0x3c4 <__addsf3+0x8>
 3e4:	ba 17       	cp	r27, r26
 3e6:	62 07       	cpc	r22, r18
 3e8:	73 07       	cpc	r23, r19
 3ea:	84 07       	cpc	r24, r20
 3ec:	95 07       	cpc	r25, r21
 3ee:	18 f0       	brcs	.+6      	; 0x3f6 <__addsf3x+0x18>
 3f0:	71 f4       	brne	.+28     	; 0x40e <__addsf3x+0x30>
 3f2:	9e f5       	brtc	.+102    	; 0x45a <__addsf3x+0x7c>
 3f4:	62 c1       	rjmp	.+708    	; 0x6ba <__fp_zero>
 3f6:	0e f4       	brtc	.+2      	; 0x3fa <__addsf3x+0x1c>
 3f8:	e0 95       	com	r30
 3fa:	0b 2e       	mov	r0, r27
 3fc:	ba 2f       	mov	r27, r26
 3fe:	a0 2d       	mov	r26, r0
 400:	0b 01       	movw	r0, r22
 402:	b9 01       	movw	r22, r18
 404:	90 01       	movw	r18, r0
 406:	0c 01       	movw	r0, r24
 408:	ca 01       	movw	r24, r20
 40a:	a0 01       	movw	r20, r0
 40c:	11 24       	eor	r1, r1
 40e:	ff 27       	eor	r31, r31
 410:	59 1b       	sub	r21, r25
 412:	99 f0       	breq	.+38     	; 0x43a <__addsf3x+0x5c>
 414:	59 3f       	cpi	r21, 0xF9	; 249
 416:	50 f4       	brcc	.+20     	; 0x42c <__addsf3x+0x4e>
 418:	50 3e       	cpi	r21, 0xE0	; 224
 41a:	68 f1       	brcs	.+90     	; 0x476 <__addsf3x+0x98>
 41c:	1a 16       	cp	r1, r26
 41e:	f0 40       	sbci	r31, 0x00	; 0
 420:	a2 2f       	mov	r26, r18
 422:	23 2f       	mov	r18, r19
 424:	34 2f       	mov	r19, r20
 426:	44 27       	eor	r20, r20
 428:	58 5f       	subi	r21, 0xF8	; 248
 42a:	f3 cf       	rjmp	.-26     	; 0x412 <__addsf3x+0x34>
 42c:	46 95       	lsr	r20
 42e:	37 95       	ror	r19
 430:	27 95       	ror	r18
 432:	a7 95       	ror	r26
 434:	f0 40       	sbci	r31, 0x00	; 0
 436:	53 95       	inc	r21
 438:	c9 f7       	brne	.-14     	; 0x42c <__addsf3x+0x4e>
 43a:	7e f4       	brtc	.+30     	; 0x45a <__addsf3x+0x7c>
 43c:	1f 16       	cp	r1, r31
 43e:	ba 0b       	sbc	r27, r26
 440:	62 0b       	sbc	r22, r18
 442:	73 0b       	sbc	r23, r19
 444:	84 0b       	sbc	r24, r20
 446:	ba f0       	brmi	.+46     	; 0x476 <__addsf3x+0x98>
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	a1 f0       	breq	.+40     	; 0x474 <__addsf3x+0x96>
 44c:	ff 0f       	add	r31, r31
 44e:	bb 1f       	adc	r27, r27
 450:	66 1f       	adc	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	c2 f7       	brpl	.-16     	; 0x448 <__addsf3x+0x6a>
 458:	0e c0       	rjmp	.+28     	; 0x476 <__addsf3x+0x98>
 45a:	ba 0f       	add	r27, r26
 45c:	62 1f       	adc	r22, r18
 45e:	73 1f       	adc	r23, r19
 460:	84 1f       	adc	r24, r20
 462:	48 f4       	brcc	.+18     	; 0x476 <__addsf3x+0x98>
 464:	87 95       	ror	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f7 95       	ror	r31
 46e:	9e 3f       	cpi	r25, 0xFE	; 254
 470:	08 f0       	brcs	.+2      	; 0x474 <__addsf3x+0x96>
 472:	b3 cf       	rjmp	.-154    	; 0x3da <__addsf3+0x1e>
 474:	93 95       	inc	r25
 476:	88 0f       	add	r24, r24
 478:	08 f0       	brcs	.+2      	; 0x47c <__addsf3x+0x9e>
 47a:	99 27       	eor	r25, r25
 47c:	ee 0f       	add	r30, r30
 47e:	97 95       	ror	r25
 480:	87 95       	ror	r24
 482:	08 95       	ret

00000484 <__divsf3>:
 484:	0c d0       	rcall	.+24     	; 0x49e <__divsf3x>
 486:	e6 c0       	rjmp	.+460    	; 0x654 <__fp_round>
 488:	de d0       	rcall	.+444    	; 0x646 <__fp_pscB>
 48a:	40 f0       	brcs	.+16     	; 0x49c <__divsf3+0x18>
 48c:	d5 d0       	rcall	.+426    	; 0x638 <__fp_pscA>
 48e:	30 f0       	brcs	.+12     	; 0x49c <__divsf3+0x18>
 490:	21 f4       	brne	.+8      	; 0x49a <__divsf3+0x16>
 492:	5f 3f       	cpi	r21, 0xFF	; 255
 494:	19 f0       	breq	.+6      	; 0x49c <__divsf3+0x18>
 496:	c7 c0       	rjmp	.+398    	; 0x626 <__fp_inf>
 498:	51 11       	cpse	r21, r1
 49a:	10 c1       	rjmp	.+544    	; 0x6bc <__fp_szero>
 49c:	ca c0       	rjmp	.+404    	; 0x632 <__fp_nan>

0000049e <__divsf3x>:
 49e:	eb d0       	rcall	.+470    	; 0x676 <__fp_split3>
 4a0:	98 f3       	brcs	.-26     	; 0x488 <__divsf3+0x4>

000004a2 <__divsf3_pse>:
 4a2:	99 23       	and	r25, r25
 4a4:	c9 f3       	breq	.-14     	; 0x498 <__divsf3+0x14>
 4a6:	55 23       	and	r21, r21
 4a8:	b1 f3       	breq	.-20     	; 0x496 <__divsf3+0x12>
 4aa:	95 1b       	sub	r25, r21
 4ac:	55 0b       	sbc	r21, r21
 4ae:	bb 27       	eor	r27, r27
 4b0:	aa 27       	eor	r26, r26
 4b2:	62 17       	cp	r22, r18
 4b4:	73 07       	cpc	r23, r19
 4b6:	84 07       	cpc	r24, r20
 4b8:	38 f0       	brcs	.+14     	; 0x4c8 <__divsf3_pse+0x26>
 4ba:	9f 5f       	subi	r25, 0xFF	; 255
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	44 1f       	adc	r20, r20
 4c4:	aa 1f       	adc	r26, r26
 4c6:	a9 f3       	breq	.-22     	; 0x4b2 <__divsf3_pse+0x10>
 4c8:	33 d0       	rcall	.+102    	; 0x530 <__divsf3_pse+0x8e>
 4ca:	0e 2e       	mov	r0, r30
 4cc:	3a f0       	brmi	.+14     	; 0x4dc <__divsf3_pse+0x3a>
 4ce:	e0 e8       	ldi	r30, 0x80	; 128
 4d0:	30 d0       	rcall	.+96     	; 0x532 <__divsf3_pse+0x90>
 4d2:	91 50       	subi	r25, 0x01	; 1
 4d4:	50 40       	sbci	r21, 0x00	; 0
 4d6:	e6 95       	lsr	r30
 4d8:	00 1c       	adc	r0, r0
 4da:	ca f7       	brpl	.-14     	; 0x4ce <__divsf3_pse+0x2c>
 4dc:	29 d0       	rcall	.+82     	; 0x530 <__divsf3_pse+0x8e>
 4de:	fe 2f       	mov	r31, r30
 4e0:	27 d0       	rcall	.+78     	; 0x530 <__divsf3_pse+0x8e>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	bb 1f       	adc	r27, r27
 4ea:	26 17       	cp	r18, r22
 4ec:	37 07       	cpc	r19, r23
 4ee:	48 07       	cpc	r20, r24
 4f0:	ab 07       	cpc	r26, r27
 4f2:	b0 e8       	ldi	r27, 0x80	; 128
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <__divsf3_pse+0x56>
 4f6:	bb 0b       	sbc	r27, r27
 4f8:	80 2d       	mov	r24, r0
 4fa:	bf 01       	movw	r22, r30
 4fc:	ff 27       	eor	r31, r31
 4fe:	93 58       	subi	r25, 0x83	; 131
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	2a f0       	brmi	.+10     	; 0x50e <__divsf3_pse+0x6c>
 504:	9e 3f       	cpi	r25, 0xFE	; 254
 506:	51 05       	cpc	r21, r1
 508:	68 f0       	brcs	.+26     	; 0x524 <__divsf3_pse+0x82>
 50a:	8d c0       	rjmp	.+282    	; 0x626 <__fp_inf>
 50c:	d7 c0       	rjmp	.+430    	; 0x6bc <__fp_szero>
 50e:	5f 3f       	cpi	r21, 0xFF	; 255
 510:	ec f3       	brlt	.-6      	; 0x50c <__divsf3_pse+0x6a>
 512:	98 3e       	cpi	r25, 0xE8	; 232
 514:	dc f3       	brlt	.-10     	; 0x50c <__divsf3_pse+0x6a>
 516:	86 95       	lsr	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f7 95       	ror	r31
 520:	9f 5f       	subi	r25, 0xFF	; 255
 522:	c9 f7       	brne	.-14     	; 0x516 <__divsf3_pse+0x74>
 524:	88 0f       	add	r24, r24
 526:	91 1d       	adc	r25, r1
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret
 530:	e1 e0       	ldi	r30, 0x01	; 1
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	bb 1f       	adc	r27, r27
 53a:	62 17       	cp	r22, r18
 53c:	73 07       	cpc	r23, r19
 53e:	84 07       	cpc	r24, r20
 540:	ba 07       	cpc	r27, r26
 542:	20 f0       	brcs	.+8      	; 0x54c <__divsf3_pse+0xaa>
 544:	62 1b       	sub	r22, r18
 546:	73 0b       	sbc	r23, r19
 548:	84 0b       	sbc	r24, r20
 54a:	ba 0b       	sbc	r27, r26
 54c:	ee 1f       	adc	r30, r30
 54e:	88 f7       	brcc	.-30     	; 0x532 <__divsf3_pse+0x90>
 550:	e0 95       	com	r30
 552:	08 95       	ret

00000554 <__fixunssfsi>:
 554:	98 d0       	rcall	.+304    	; 0x686 <__fp_splitA>
 556:	88 f0       	brcs	.+34     	; 0x57a <__fixunssfsi+0x26>
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	90 f0       	brcs	.+36     	; 0x580 <__fixunssfsi+0x2c>
 55c:	b9 2f       	mov	r27, r25
 55e:	99 27       	eor	r25, r25
 560:	b7 51       	subi	r27, 0x17	; 23
 562:	a0 f0       	brcs	.+40     	; 0x58c <__fixunssfsi+0x38>
 564:	d1 f0       	breq	.+52     	; 0x59a <__fixunssfsi+0x46>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a f0       	brmi	.+6      	; 0x576 <__fixunssfsi+0x22>
 570:	ba 95       	dec	r27
 572:	c9 f7       	brne	.-14     	; 0x566 <__fixunssfsi+0x12>
 574:	12 c0       	rjmp	.+36     	; 0x59a <__fixunssfsi+0x46>
 576:	b1 30       	cpi	r27, 0x01	; 1
 578:	81 f0       	breq	.+32     	; 0x59a <__fixunssfsi+0x46>
 57a:	9f d0       	rcall	.+318    	; 0x6ba <__fp_zero>
 57c:	b1 e0       	ldi	r27, 0x01	; 1
 57e:	08 95       	ret
 580:	9c c0       	rjmp	.+312    	; 0x6ba <__fp_zero>
 582:	67 2f       	mov	r22, r23
 584:	78 2f       	mov	r23, r24
 586:	88 27       	eor	r24, r24
 588:	b8 5f       	subi	r27, 0xF8	; 248
 58a:	39 f0       	breq	.+14     	; 0x59a <__fixunssfsi+0x46>
 58c:	b9 3f       	cpi	r27, 0xF9	; 249
 58e:	cc f3       	brlt	.-14     	; 0x582 <__fixunssfsi+0x2e>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b3 95       	inc	r27
 598:	d9 f7       	brne	.-10     	; 0x590 <__fixunssfsi+0x3c>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__fixunssfsi+0x56>
 59c:	90 95       	com	r25
 59e:	80 95       	com	r24
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__floatunsisf>:
 5ac:	e8 94       	clt
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <__floatsisf+0x12>

000005b0 <__floatsisf>:
 5b0:	97 fb       	bst	r25, 7
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__floatsisf+0x12>
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	99 23       	and	r25, r25
 5c4:	a9 f0       	breq	.+42     	; 0x5f0 <__floatsisf+0x40>
 5c6:	f9 2f       	mov	r31, r25
 5c8:	96 e9       	ldi	r25, 0x96	; 150
 5ca:	bb 27       	eor	r27, r27
 5cc:	93 95       	inc	r25
 5ce:	f6 95       	lsr	r31
 5d0:	87 95       	ror	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b7 95       	ror	r27
 5d8:	f1 11       	cpse	r31, r1
 5da:	f8 cf       	rjmp	.-16     	; 0x5cc <__floatsisf+0x1c>
 5dc:	fa f4       	brpl	.+62     	; 0x61c <__floatsisf+0x6c>
 5de:	bb 0f       	add	r27, r27
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__floatsisf+0x36>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	1b c0       	rjmp	.+54     	; 0x61c <__floatsisf+0x6c>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <__floatsisf+0x6c>
 5f0:	88 23       	and	r24, r24
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <__floatsisf+0x48>
 5f4:	96 e9       	ldi	r25, 0x96	; 150
 5f6:	11 c0       	rjmp	.+34     	; 0x61a <__floatsisf+0x6a>
 5f8:	77 23       	and	r23, r23
 5fa:	21 f0       	breq	.+8      	; 0x604 <__floatsisf+0x54>
 5fc:	9e e8       	ldi	r25, 0x8E	; 142
 5fe:	87 2f       	mov	r24, r23
 600:	76 2f       	mov	r23, r22
 602:	05 c0       	rjmp	.+10     	; 0x60e <__floatsisf+0x5e>
 604:	66 23       	and	r22, r22
 606:	71 f0       	breq	.+28     	; 0x624 <__floatsisf+0x74>
 608:	96 e8       	ldi	r25, 0x86	; 134
 60a:	86 2f       	mov	r24, r22
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	2a f0       	brmi	.+10     	; 0x61c <__floatsisf+0x6c>
 612:	9a 95       	dec	r25
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	da f7       	brpl	.-10     	; 0x612 <__floatsisf+0x62>
 61c:	88 0f       	add	r24, r24
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	97 f9       	bld	r25, 7
 624:	08 95       	ret

00000626 <__fp_inf>:
 626:	97 f9       	bld	r25, 7
 628:	9f 67       	ori	r25, 0x7F	; 127
 62a:	80 e8       	ldi	r24, 0x80	; 128
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	08 95       	ret

00000632 <__fp_nan>:
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	80 ec       	ldi	r24, 0xC0	; 192
 636:	08 95       	ret

00000638 <__fp_pscA>:
 638:	00 24       	eor	r0, r0
 63a:	0a 94       	dec	r0
 63c:	16 16       	cp	r1, r22
 63e:	17 06       	cpc	r1, r23
 640:	18 06       	cpc	r1, r24
 642:	09 06       	cpc	r0, r25
 644:	08 95       	ret

00000646 <__fp_pscB>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	14 06       	cpc	r1, r20
 650:	05 06       	cpc	r0, r21
 652:	08 95       	ret

00000654 <__fp_round>:
 654:	09 2e       	mov	r0, r25
 656:	03 94       	inc	r0
 658:	00 0c       	add	r0, r0
 65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0xc>
 65c:	88 23       	and	r24, r24
 65e:	52 f0       	brmi	.+20     	; 0x674 <__fp_round+0x20>
 660:	bb 0f       	add	r27, r27
 662:	40 f4       	brcc	.+16     	; 0x674 <__fp_round+0x20>
 664:	bf 2b       	or	r27, r31
 666:	11 f4       	brne	.+4      	; 0x66c <__fp_round+0x18>
 668:	60 ff       	sbrs	r22, 0
 66a:	04 c0       	rjmp	.+8      	; 0x674 <__fp_round+0x20>
 66c:	6f 5f       	subi	r22, 0xFF	; 255
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__fp_split3>:
 676:	57 fd       	sbrc	r21, 7
 678:	90 58       	subi	r25, 0x80	; 128
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	59 f0       	breq	.+22     	; 0x696 <__fp_splitA+0x10>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	71 f0       	breq	.+28     	; 0x6a0 <__fp_splitA+0x1a>
 684:	47 95       	ror	r20

00000686 <__fp_splitA>:
 686:	88 0f       	add	r24, r24
 688:	97 fb       	bst	r25, 7
 68a:	99 1f       	adc	r25, r25
 68c:	61 f0       	breq	.+24     	; 0x6a6 <__fp_splitA+0x20>
 68e:	9f 3f       	cpi	r25, 0xFF	; 255
 690:	79 f0       	breq	.+30     	; 0x6b0 <__fp_splitA+0x2a>
 692:	87 95       	ror	r24
 694:	08 95       	ret
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	55 1f       	adc	r21, r21
 69e:	f2 cf       	rjmp	.-28     	; 0x684 <__fp_split3+0xe>
 6a0:	46 95       	lsr	r20
 6a2:	f1 df       	rcall	.-30     	; 0x686 <__fp_splitA>
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <__fp_splitA+0x30>
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	f1 cf       	rjmp	.-30     	; 0x692 <__fp_splitA+0xc>
 6b0:	86 95       	lsr	r24
 6b2:	71 05       	cpc	r23, r1
 6b4:	61 05       	cpc	r22, r1
 6b6:	08 94       	sec
 6b8:	08 95       	ret

000006ba <__fp_zero>:
 6ba:	e8 94       	clt

000006bc <__fp_szero>:
 6bc:	bb 27       	eor	r27, r27
 6be:	66 27       	eor	r22, r22
 6c0:	77 27       	eor	r23, r23
 6c2:	cb 01       	movw	r24, r22
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__udivmodhi4>:
 6c8:	aa 1b       	sub	r26, r26
 6ca:	bb 1b       	sub	r27, r27
 6cc:	51 e1       	ldi	r21, 0x11	; 17
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <__udivmodhi4_ep>

000006d0 <__udivmodhi4_loop>:
 6d0:	aa 1f       	adc	r26, r26
 6d2:	bb 1f       	adc	r27, r27
 6d4:	a6 17       	cp	r26, r22
 6d6:	b7 07       	cpc	r27, r23
 6d8:	10 f0       	brcs	.+4      	; 0x6de <__udivmodhi4_ep>
 6da:	a6 1b       	sub	r26, r22
 6dc:	b7 0b       	sbc	r27, r23

000006de <__udivmodhi4_ep>:
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	5a 95       	dec	r21
 6e4:	a9 f7       	brne	.-22     	; 0x6d0 <__udivmodhi4_loop>
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	bc 01       	movw	r22, r24
 6ec:	cd 01       	movw	r24, r26
 6ee:	08 95       	ret

000006f0 <__umulhisi3>:
 6f0:	a2 9f       	mul	r26, r18
 6f2:	b0 01       	movw	r22, r0
 6f4:	b3 9f       	mul	r27, r19
 6f6:	c0 01       	movw	r24, r0
 6f8:	a3 9f       	mul	r26, r19
 6fa:	70 0d       	add	r23, r0
 6fc:	81 1d       	adc	r24, r1
 6fe:	11 24       	eor	r1, r1
 700:	91 1d       	adc	r25, r1
 702:	b2 9f       	mul	r27, r18
 704:	70 0d       	add	r23, r0
 706:	81 1d       	adc	r24, r1
 708:	11 24       	eor	r1, r1
 70a:	91 1d       	adc	r25, r1
 70c:	08 95       	ret

0000070e <_exit>:
 70e:	f8 94       	cli

00000710 <__stop_program>:
 710:	ff cf       	rjmp	.-2      	; 0x710 <__stop_program>
